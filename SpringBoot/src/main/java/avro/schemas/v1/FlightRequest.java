/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.schemas.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlightRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5355317038791258685L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlightRequest\",\"namespace\":\"avro.schemas.v1\",\"fields\":[{\"name\":\"flightCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fromCoordinates\",\"type\":[{\"type\":\"record\",\"name\":\"Coordinates\",\"fields\":[{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lon\",\"type\":\"float\"}]},\"null\"]},{\"name\":\"toCoordinates\",\"type\":[\"Coordinates\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlightRequest> ENCODER =
      new BinaryMessageEncoder<FlightRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlightRequest> DECODER =
      new BinaryMessageDecoder<FlightRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlightRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlightRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlightRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FlightRequest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlightRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlightRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlightRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlightRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String flightCode;
   private avro.schemas.v1.Coordinates fromCoordinates;
   private avro.schemas.v1.Coordinates toCoordinates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlightRequest() {}

  /**
   * All-args constructor.
   * @param flightCode The new value for flightCode
   * @param fromCoordinates The new value for fromCoordinates
   * @param toCoordinates The new value for toCoordinates
   */
  public FlightRequest(java.lang.String flightCode, avro.schemas.v1.Coordinates fromCoordinates, avro.schemas.v1.Coordinates toCoordinates) {
    this.flightCode = flightCode;
    this.fromCoordinates = fromCoordinates;
    this.toCoordinates = toCoordinates;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flightCode;
    case 1: return fromCoordinates;
    case 2: return toCoordinates;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flightCode = value$ != null ? value$.toString() : null; break;
    case 1: fromCoordinates = (avro.schemas.v1.Coordinates)value$; break;
    case 2: toCoordinates = (avro.schemas.v1.Coordinates)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'flightCode' field.
   * @return The value of the 'flightCode' field.
   */
  public java.lang.String getFlightCode() {
    return flightCode;
  }


  /**
   * Sets the value of the 'flightCode' field.
   * @param value the value to set.
   */
  public void setFlightCode(java.lang.String value) {
    this.flightCode = value;
  }

  /**
   * Gets the value of the 'fromCoordinates' field.
   * @return The value of the 'fromCoordinates' field.
   */
  public avro.schemas.v1.Coordinates getFromCoordinates() {
    return fromCoordinates;
  }


  /**
   * Sets the value of the 'fromCoordinates' field.
   * @param value the value to set.
   */
  public void setFromCoordinates(avro.schemas.v1.Coordinates value) {
    this.fromCoordinates = value;
  }

  /**
   * Gets the value of the 'toCoordinates' field.
   * @return The value of the 'toCoordinates' field.
   */
  public avro.schemas.v1.Coordinates getToCoordinates() {
    return toCoordinates;
  }


  /**
   * Sets the value of the 'toCoordinates' field.
   * @param value the value to set.
   */
  public void setToCoordinates(avro.schemas.v1.Coordinates value) {
    this.toCoordinates = value;
  }

  /**
   * Creates a new FlightRequest RecordBuilder.
   * @return A new FlightRequest RecordBuilder
   */
  public static avro.schemas.v1.FlightRequest.Builder newBuilder() {
    return new avro.schemas.v1.FlightRequest.Builder();
  }

  /**
   * Creates a new FlightRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlightRequest RecordBuilder
   */
  public static avro.schemas.v1.FlightRequest.Builder newBuilder(avro.schemas.v1.FlightRequest.Builder other) {
    if (other == null) {
      return new avro.schemas.v1.FlightRequest.Builder();
    } else {
      return new avro.schemas.v1.FlightRequest.Builder(other);
    }
  }

  /**
   * Creates a new FlightRequest RecordBuilder by copying an existing FlightRequest instance.
   * @param other The existing instance to copy.
   * @return A new FlightRequest RecordBuilder
   */
  public static avro.schemas.v1.FlightRequest.Builder newBuilder(avro.schemas.v1.FlightRequest other) {
    if (other == null) {
      return new avro.schemas.v1.FlightRequest.Builder();
    } else {
      return new avro.schemas.v1.FlightRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlightRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlightRequest>
    implements org.apache.avro.data.RecordBuilder<FlightRequest> {

    private java.lang.String flightCode;
    private avro.schemas.v1.Coordinates fromCoordinates;
    private avro.schemas.v1.Coordinates.Builder fromCoordinatesBuilder;
    private avro.schemas.v1.Coordinates toCoordinates;
    private avro.schemas.v1.Coordinates.Builder toCoordinatesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.schemas.v1.FlightRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flightCode)) {
        this.flightCode = data().deepCopy(fields()[0].schema(), other.flightCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fromCoordinates)) {
        this.fromCoordinates = data().deepCopy(fields()[1].schema(), other.fromCoordinates);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasFromCoordinatesBuilder()) {
        this.fromCoordinatesBuilder = avro.schemas.v1.Coordinates.newBuilder(other.getFromCoordinatesBuilder());
      }
      if (isValidValue(fields()[2], other.toCoordinates)) {
        this.toCoordinates = data().deepCopy(fields()[2].schema(), other.toCoordinates);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasToCoordinatesBuilder()) {
        this.toCoordinatesBuilder = avro.schemas.v1.Coordinates.newBuilder(other.getToCoordinatesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing FlightRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.schemas.v1.FlightRequest other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.flightCode)) {
        this.flightCode = data().deepCopy(fields()[0].schema(), other.flightCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromCoordinates)) {
        this.fromCoordinates = data().deepCopy(fields()[1].schema(), other.fromCoordinates);
        fieldSetFlags()[1] = true;
      }
      this.fromCoordinatesBuilder = null;
      if (isValidValue(fields()[2], other.toCoordinates)) {
        this.toCoordinates = data().deepCopy(fields()[2].schema(), other.toCoordinates);
        fieldSetFlags()[2] = true;
      }
      this.toCoordinatesBuilder = null;
    }

    /**
      * Gets the value of the 'flightCode' field.
      * @return The value.
      */
    public java.lang.String getFlightCode() {
      return flightCode;
    }


    /**
      * Sets the value of the 'flightCode' field.
      * @param value The value of 'flightCode'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightRequest.Builder setFlightCode(java.lang.String value) {
      validate(fields()[0], value);
      this.flightCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flightCode' field has been set.
      * @return True if the 'flightCode' field has been set, false otherwise.
      */
    public boolean hasFlightCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flightCode' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightRequest.Builder clearFlightCode() {
      flightCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromCoordinates' field.
      * @return The value.
      */
    public avro.schemas.v1.Coordinates getFromCoordinates() {
      return fromCoordinates;
    }


    /**
      * Sets the value of the 'fromCoordinates' field.
      * @param value The value of 'fromCoordinates'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightRequest.Builder setFromCoordinates(avro.schemas.v1.Coordinates value) {
      validate(fields()[1], value);
      this.fromCoordinatesBuilder = null;
      this.fromCoordinates = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromCoordinates' field has been set.
      * @return True if the 'fromCoordinates' field has been set, false otherwise.
      */
    public boolean hasFromCoordinates() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'fromCoordinates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public avro.schemas.v1.Coordinates.Builder getFromCoordinatesBuilder() {
      if (fromCoordinatesBuilder == null) {
        if (hasFromCoordinates()) {
          setFromCoordinatesBuilder(avro.schemas.v1.Coordinates.newBuilder(fromCoordinates));
        } else {
          setFromCoordinatesBuilder(avro.schemas.v1.Coordinates.newBuilder());
        }
      }
      return fromCoordinatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'fromCoordinates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public avro.schemas.v1.FlightRequest.Builder setFromCoordinatesBuilder(avro.schemas.v1.Coordinates.Builder value) {
      clearFromCoordinates();
      fromCoordinatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fromCoordinates' field has an active Builder instance
     * @return True if the 'fromCoordinates' field has an active Builder instance
     */
    public boolean hasFromCoordinatesBuilder() {
      return fromCoordinatesBuilder != null;
    }

    /**
      * Clears the value of the 'fromCoordinates' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightRequest.Builder clearFromCoordinates() {
      fromCoordinates = null;
      fromCoordinatesBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toCoordinates' field.
      * @return The value.
      */
    public avro.schemas.v1.Coordinates getToCoordinates() {
      return toCoordinates;
    }


    /**
      * Sets the value of the 'toCoordinates' field.
      * @param value The value of 'toCoordinates'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightRequest.Builder setToCoordinates(avro.schemas.v1.Coordinates value) {
      validate(fields()[2], value);
      this.toCoordinatesBuilder = null;
      this.toCoordinates = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toCoordinates' field has been set.
      * @return True if the 'toCoordinates' field has been set, false otherwise.
      */
    public boolean hasToCoordinates() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'toCoordinates' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public avro.schemas.v1.Coordinates.Builder getToCoordinatesBuilder() {
      if (toCoordinatesBuilder == null) {
        if (hasToCoordinates()) {
          setToCoordinatesBuilder(avro.schemas.v1.Coordinates.newBuilder(toCoordinates));
        } else {
          setToCoordinatesBuilder(avro.schemas.v1.Coordinates.newBuilder());
        }
      }
      return toCoordinatesBuilder;
    }

    /**
     * Sets the Builder instance for the 'toCoordinates' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public avro.schemas.v1.FlightRequest.Builder setToCoordinatesBuilder(avro.schemas.v1.Coordinates.Builder value) {
      clearToCoordinates();
      toCoordinatesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'toCoordinates' field has an active Builder instance
     * @return True if the 'toCoordinates' field has an active Builder instance
     */
    public boolean hasToCoordinatesBuilder() {
      return toCoordinatesBuilder != null;
    }

    /**
      * Clears the value of the 'toCoordinates' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightRequest.Builder clearToCoordinates() {
      toCoordinates = null;
      toCoordinatesBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlightRequest build() {
      try {
        FlightRequest record = new FlightRequest();
        record.flightCode = fieldSetFlags()[0] ? this.flightCode : (java.lang.String) defaultValue(fields()[0]);
        if (fromCoordinatesBuilder != null) {
          try {
            record.fromCoordinates = this.fromCoordinatesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("fromCoordinates"));
            throw e;
          }
        } else {
          record.fromCoordinates = fieldSetFlags()[1] ? this.fromCoordinates : (avro.schemas.v1.Coordinates) defaultValue(fields()[1]);
        }
        if (toCoordinatesBuilder != null) {
          try {
            record.toCoordinates = this.toCoordinatesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("toCoordinates"));
            throw e;
          }
        } else {
          record.toCoordinates = fieldSetFlags()[2] ? this.toCoordinates : (avro.schemas.v1.Coordinates) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlightRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlightRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlightRequest>
    READER$ = (org.apache.avro.io.DatumReader<FlightRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.flightCode);

    if (this.fromCoordinates == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      this.fromCoordinates.customEncode(out);
    }

    if (this.toCoordinates == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      this.toCoordinates.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.flightCode = in.readString();

      if (in.readIndex() != 0) {
        in.readNull();
        this.fromCoordinates = null;
      } else {
        if (this.fromCoordinates == null) {
          this.fromCoordinates = new avro.schemas.v1.Coordinates();
        }
        this.fromCoordinates.customDecode(in);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.toCoordinates = null;
      } else {
        if (this.toCoordinates == null) {
          this.toCoordinates = new avro.schemas.v1.Coordinates();
        }
        this.toCoordinates.customDecode(in);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.flightCode = in.readString();
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.fromCoordinates = null;
          } else {
            if (this.fromCoordinates == null) {
              this.fromCoordinates = new avro.schemas.v1.Coordinates();
            }
            this.fromCoordinates.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.toCoordinates = null;
          } else {
            if (this.toCoordinates == null) {
              this.toCoordinates = new avro.schemas.v1.Coordinates();
            }
            this.toCoordinates.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










