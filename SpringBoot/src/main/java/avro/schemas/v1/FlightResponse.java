/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.schemas.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlightResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3909902280077221135L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlightResponse\",\"namespace\":\"avro.schemas.v1\",\"fields\":[{\"name\":\"flightCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"distance\",\"type\":\"float\"},{\"name\":\"flightTime\",\"type\":\"int\"},{\"name\":\"flightStatus\",\"type\":[{\"type\":\"enum\",\"name\":\"FlightStatus\",\"symbols\":[\"APPROVED\",\"REJECTED\"]},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlightResponse> ENCODER =
      new BinaryMessageEncoder<FlightResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlightResponse> DECODER =
      new BinaryMessageDecoder<FlightResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlightResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlightResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlightResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FlightResponse>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlightResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlightResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlightResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlightResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String flightCode;
   private float distance;
   private int flightTime;
   private avro.schemas.v1.FlightStatus flightStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlightResponse() {}

  /**
   * All-args constructor.
   * @param flightCode The new value for flightCode
   * @param distance The new value for distance
   * @param flightTime The new value for flightTime
   * @param flightStatus The new value for flightStatus
   */
  public FlightResponse(java.lang.String flightCode, java.lang.Float distance, java.lang.Integer flightTime, avro.schemas.v1.FlightStatus flightStatus) {
    this.flightCode = flightCode;
    this.distance = distance;
    this.flightTime = flightTime;
    this.flightStatus = flightStatus;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flightCode;
    case 1: return distance;
    case 2: return flightTime;
    case 3: return flightStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flightCode = value$ != null ? value$.toString() : null; break;
    case 1: distance = (java.lang.Float)value$; break;
    case 2: flightTime = (java.lang.Integer)value$; break;
    case 3: flightStatus = (avro.schemas.v1.FlightStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'flightCode' field.
   * @return The value of the 'flightCode' field.
   */
  public java.lang.String getFlightCode() {
    return flightCode;
  }


  /**
   * Sets the value of the 'flightCode' field.
   * @param value the value to set.
   */
  public void setFlightCode(java.lang.String value) {
    this.flightCode = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public float getDistance() {
    return distance;
  }


  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(float value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'flightTime' field.
   * @return The value of the 'flightTime' field.
   */
  public int getFlightTime() {
    return flightTime;
  }


  /**
   * Sets the value of the 'flightTime' field.
   * @param value the value to set.
   */
  public void setFlightTime(int value) {
    this.flightTime = value;
  }

  /**
   * Gets the value of the 'flightStatus' field.
   * @return The value of the 'flightStatus' field.
   */
  public avro.schemas.v1.FlightStatus getFlightStatus() {
    return flightStatus;
  }


  /**
   * Sets the value of the 'flightStatus' field.
   * @param value the value to set.
   */
  public void setFlightStatus(avro.schemas.v1.FlightStatus value) {
    this.flightStatus = value;
  }

  /**
   * Creates a new FlightResponse RecordBuilder.
   * @return A new FlightResponse RecordBuilder
   */
  public static avro.schemas.v1.FlightResponse.Builder newBuilder() {
    return new avro.schemas.v1.FlightResponse.Builder();
  }

  /**
   * Creates a new FlightResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlightResponse RecordBuilder
   */
  public static avro.schemas.v1.FlightResponse.Builder newBuilder(avro.schemas.v1.FlightResponse.Builder other) {
    if (other == null) {
      return new avro.schemas.v1.FlightResponse.Builder();
    } else {
      return new avro.schemas.v1.FlightResponse.Builder(other);
    }
  }

  /**
   * Creates a new FlightResponse RecordBuilder by copying an existing FlightResponse instance.
   * @param other The existing instance to copy.
   * @return A new FlightResponse RecordBuilder
   */
  public static avro.schemas.v1.FlightResponse.Builder newBuilder(avro.schemas.v1.FlightResponse other) {
    if (other == null) {
      return new avro.schemas.v1.FlightResponse.Builder();
    } else {
      return new avro.schemas.v1.FlightResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlightResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlightResponse>
    implements org.apache.avro.data.RecordBuilder<FlightResponse> {

    private java.lang.String flightCode;
    private float distance;
    private int flightTime;
    private avro.schemas.v1.FlightStatus flightStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.schemas.v1.FlightResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flightCode)) {
        this.flightCode = data().deepCopy(fields()[0].schema(), other.flightCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.distance)) {
        this.distance = data().deepCopy(fields()[1].schema(), other.distance);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.flightTime)) {
        this.flightTime = data().deepCopy(fields()[2].schema(), other.flightTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.flightStatus)) {
        this.flightStatus = data().deepCopy(fields()[3].schema(), other.flightStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing FlightResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.schemas.v1.FlightResponse other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.flightCode)) {
        this.flightCode = data().deepCopy(fields()[0].schema(), other.flightCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.distance)) {
        this.distance = data().deepCopy(fields()[1].schema(), other.distance);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.flightTime)) {
        this.flightTime = data().deepCopy(fields()[2].schema(), other.flightTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.flightStatus)) {
        this.flightStatus = data().deepCopy(fields()[3].schema(), other.flightStatus);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'flightCode' field.
      * @return The value.
      */
    public java.lang.String getFlightCode() {
      return flightCode;
    }


    /**
      * Sets the value of the 'flightCode' field.
      * @param value The value of 'flightCode'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder setFlightCode(java.lang.String value) {
      validate(fields()[0], value);
      this.flightCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flightCode' field has been set.
      * @return True if the 'flightCode' field has been set, false otherwise.
      */
    public boolean hasFlightCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flightCode' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder clearFlightCode() {
      flightCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public float getDistance() {
      return distance;
    }


    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder setDistance(float value) {
      validate(fields()[1], value);
      this.distance = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder clearDistance() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'flightTime' field.
      * @return The value.
      */
    public int getFlightTime() {
      return flightTime;
    }


    /**
      * Sets the value of the 'flightTime' field.
      * @param value The value of 'flightTime'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder setFlightTime(int value) {
      validate(fields()[2], value);
      this.flightTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'flightTime' field has been set.
      * @return True if the 'flightTime' field has been set, false otherwise.
      */
    public boolean hasFlightTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'flightTime' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder clearFlightTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'flightStatus' field.
      * @return The value.
      */
    public avro.schemas.v1.FlightStatus getFlightStatus() {
      return flightStatus;
    }


    /**
      * Sets the value of the 'flightStatus' field.
      * @param value The value of 'flightStatus'.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder setFlightStatus(avro.schemas.v1.FlightStatus value) {
      validate(fields()[3], value);
      this.flightStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'flightStatus' field has been set.
      * @return True if the 'flightStatus' field has been set, false otherwise.
      */
    public boolean hasFlightStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'flightStatus' field.
      * @return This builder.
      */
    public avro.schemas.v1.FlightResponse.Builder clearFlightStatus() {
      flightStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlightResponse build() {
      try {
        FlightResponse record = new FlightResponse();
        record.flightCode = fieldSetFlags()[0] ? this.flightCode : (java.lang.String) defaultValue(fields()[0]);
        record.distance = fieldSetFlags()[1] ? this.distance : (java.lang.Float) defaultValue(fields()[1]);
        record.flightTime = fieldSetFlags()[2] ? this.flightTime : (java.lang.Integer) defaultValue(fields()[2]);
        record.flightStatus = fieldSetFlags()[3] ? this.flightStatus : (avro.schemas.v1.FlightStatus) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlightResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlightResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlightResponse>
    READER$ = (org.apache.avro.io.DatumReader<FlightResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.flightCode);

    out.writeFloat(this.distance);

    out.writeInt(this.flightTime);

    if (this.flightStatus == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeEnum(this.flightStatus.ordinal());
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.flightCode = in.readString();

      this.distance = in.readFloat();

      this.flightTime = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.flightStatus = null;
      } else {
        this.flightStatus = avro.schemas.v1.FlightStatus.values()[in.readEnum()];
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.flightCode = in.readString();
          break;

        case 1:
          this.distance = in.readFloat();
          break;

        case 2:
          this.flightTime = in.readInt();
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.flightStatus = null;
          } else {
            this.flightStatus = avro.schemas.v1.FlightStatus.values()[in.readEnum()];
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










